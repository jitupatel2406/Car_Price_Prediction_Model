# -*- coding: utf-8 -*-
"""Car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jFIWcQBiuPWVI4ht3xrcLWAzrRV4Y8N_

Import the Dependencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
import joblib

"""Data Collection and Processing"""

#loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/car data.csv')

"""Checking the dataset"""

car_dataset.head()

car_dataset.shape

car_dataset.info()

#checking the numsber of missing values
car_dataset.isnull().sum()

# checking the distribution of categorical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding Categorical Data"""

# Encoding "fuel type data " Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace =True)

# Encoding "Seller  type data " Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace =True)

# Encoding "Transmission type data " Column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace =True)

car_dataset.head()

"""Splitting the data and target"""

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y =car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training data and Test data"""

X_train,X_test, Y_train, Y_test =train_test_split(X,Y,test_size=0.1,random_state=2)

"""Model Training

1. Linear Regression
"""

# loading the linear regression model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = lin_reg_model.predict(X_train)

# R suare Error
error_score = metrics.r2_score(Y_train,training_data_prediction)
print("R squared Error : ",error_score)

"""Visualize the actual prices and Predicted price"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted_Price")
plt.title("Actual_Price vs Predicted_Price")
plt.grid(True)
plt.show()

# prediction on test data
test_data_prediction = lin_reg_model.predict(X_test)

# R suare Error for test data
error_score = metrics.r2_score(Y_test,test_data_prediction)
print("R squared Error : ",error_score)

# plotting the test data
plt.scatter(Y_test,test_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted_Price")
plt.title("Actual_Price vs Predicted_Price")
plt.grid(True)
plt.show()

friends_car = np.array([
    [2012, 6.98, 130000,	1,	1,	0, 1],
    [2014, 6.98, 150000,	1,	1,	0, 1],
    [2015, 6.18, 120000,	1,	1,	0, 1]])

friends_car_df = pd.DataFrame(friends_car, columns=X.columns)
prediction = lin_reg_model.predict(friends_car_df)
# print(prediction)
print("The predictions are as follows: ")
for j,i in enumerate(prediction):
  print(f'The selling price for the {j+1} car is {i:.3} Lakh')

# save model
joblib.dump(lin_reg_model,"linear_regression_car_price")